So you want to build Twizzler
=============================

This is an operating system kernel and userspace. Thus the build system is fairly complicated, so
strap yourself in :)

Requirements: Linux, with some reasonable build environment (gcc, make, curl, etc). A reasonably
modern x86_64 Intel system. Installed developement versions (includes headers and libraries) for
libtommath and libtomcrypt. Python 3 as the default 'python' on your system.

Note for Ubuntu users: Ubuntu uses dash as its shell by default. I have not tested the build system
on Ubuntu.

*If you don't have a suitable machine or don't want to set one up, ask me (Daniel) and I may be able
to give you an account on one of mine that is know to work.*

A Quick Tour
------------
This repo contains code to build the Twizzler kernel and basic userspace. It also contains a porting
system that will automatically compile some third-party software (bash, sqlite, busybox, etc).

The following components will be build:
 * The toolchain: a toolchain is a compiler and linker (and related tools) that are used to build
   the source. Because we're compiling code for Twizzler, we need a special cross-compiler toolchain
   to build our code. The patches needed for gcc and binutils are in tools/. We actually build two
   toolchains: the unhosted toolchain (used to build the kernel) and the hosted toolchain (which is
   used to build Twizzler userspace code).
 * The kernel: the Twizzler kernel contains code found in the arch, core, include, lib, machine, and
   third-party subdirectories.
 * The utilities: Found in utils/, these programs are used to bootstrap a Twizzler environment. They
   largely consist of programs designed to turn unix concepts (like a file) into Twizzler concepts
   (like objects).
 * The userspace (under us/)
   * musl: This is a C library designed for Linux. Twizzler presents a system-call-level compatible
     Linux interface for POSIX programs (see Twix, below).
   * libtwz: The standard Twizzler library. Contains the libos, default fault handing logic, and
	 functions to work with Twizzler concepts.
   * twix: emulation for unix (presents a Linux syscall interface).
   * twzutils: a collection of Twizzler utilities (login, init, etc). Also contains drivers and gate
	 programs.
   * ports (under us/ports): a set of scripts that are used to auto-port third-party software.

The three "core" userspace libraries (libtwz, twix, and musl) are typically all linked into a given
C program automatically if you use the hosted toolchain (x86_64-pc-twizzler-musl-gcc). If you _also_
link in libbacktrace (requires -Wl,--whole-archive -lbacktrace -Wl,--no-whole-archive), then
libtwz will print pretty backtraces on faults.

Code is built out-of-tree as part of a "project". A project is a configuration for the build system
that specifies CONFIG_* variables and provides a location for built artifacts. The configuration of
a project is found under projects/<projname>/config.mk, and the build directory (henceforth
$BUILDDIR) is project/<projname>/build. To select a project when building, specify the PROJECT environment
variable to make (PROJECT=x86_64 make all).

One departure from the use of $BUILDDIR is the toolchain location. The default is to put the
toolchain in .tc. This location is part of the reason that we need to have PROJECT=<projname> when
starting the build system -- the project config will specify the location of the toolchain binaries
that are used during building.

The primary artifacts that are built are the kernel image ($BUILDDIR/kernel), the initrd
$BUILDDIR/us/root.tar, and the boot ISO ($BUILDDIR/boot.iso). The boot ISO contains both the other
files along with a grub bootloader that loads the kernel and the initrd.

A significant artifact that is used throughout the userspace build process is the "sysroot". This is
a directory that is supposed to be the "root filesystem" of the target OS (Twizzler). It is located
in $BUILDDIR/us/sysroot. This will be where the ported programs, twzutils, libraries, etc are
installed to before the initrd is created.

Finally, once built, the system can be tested with Qemu with the 'test' target for make. You may
need to specify the nested option for the kvm_intel module.

Building Twizzer the First Time
-------------------------------

1) PROJECT=x86_64 make tools-prep

This will first ask a couple questions to get you started (largely just acking that this can take
some time). It will then compile binutils and gcc for the unhosted toolchain. Once this is done, it
will bootstrap musl (this means, basically, copying the header-files into the sysroot for the hosted
C compiler to look at) and then start building the hosted toolchain. The hosted toolchain also needs
to build additional libraries, like libsanitizer and libstdc++. For these, the system also needs the
core libraries to be built as well (for some reason...), so this make step will also built temporary
versions of libtwz and twix.

This step will take a long time.

2) PROJECT=x86_64 make allutils

This step will build the utilities that are needed to build the rest of the userspace.

3) PROJECT=x86_64 ./us/ports/port.sh libbacktrace
4) PROJECT=x86_64 ./us/ports/port.sh ncurses
5) PROJECT=x86_64 ./us/ports/port.sh bash
6) PROJECT=x86_64 ./us/ports/port.sh busybox
7) PROJECT=x86_64 ./us/ports/port.sh tommath
8) PROJECT=x86_64 ./us/ports/port.sh tomcrypt

These steps will port the specified programs to Twizzler, compile them, and install them into the
sysroot. The order matters (bash depends on ncurses, for example).

9) PROJECT=x86_64 make all

This build step will build the all target, which builds the kernel and the root.tar initrd file.
This will also compile the software under third-party/, which is somewhat time consuming.

10) PROJECT=x86_64 make bootiso

That's it! It's all built! You can now try to boot that ISO image on a machine. If you want to test
on QEMU, you can also run:

11) PROJECT=x86_64 QEMU_FLAGS='-smp 4' make test

This will give Twizzler 4 CPUs to play with. Don't give it more CPUs than you actually have.


Building Twizzler Again
-----------------------

Most of the steps above can be skipped on repeat builds. For internal software, the Make system will
track dependencies fairly well. To rebuild Twizzler, typically one would run:

PROJECT=x86_64 make all

The 'test' target automatically builds the bootiso target.

Note that external software (the stuff ported via the ports system) won't be recompiled! This is
potentially a problem because Twizzler uses static linking (for now), so updates to the userspace
libraries won't carry into already-compiled software. You probably don't need to re-port everything
all the time, but if (e.g.) bash stops working after an update, give an ol' recompile and see if
that fixes it.

